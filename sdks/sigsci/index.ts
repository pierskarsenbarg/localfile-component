// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CorpCloudwafCertificateArgs, CorpCloudwafCertificateState } from "./corpCloudwafCertificate";
export type CorpCloudwafCertificate = import("./corpCloudwafCertificate").CorpCloudwafCertificate;
export const CorpCloudwafCertificate: typeof import("./corpCloudwafCertificate").CorpCloudwafCertificate = null as any;
utilities.lazyLoad(exports, ["CorpCloudwafCertificate"], () => require("./corpCloudwafCertificate"));

export { CorpCloudwafInstanceArgs, CorpCloudwafInstanceState } from "./corpCloudwafInstance";
export type CorpCloudwafInstance = import("./corpCloudwafInstance").CorpCloudwafInstance;
export const CorpCloudwafInstance: typeof import("./corpCloudwafInstance").CorpCloudwafInstance = null as any;
utilities.lazyLoad(exports, ["CorpCloudwafInstance"], () => require("./corpCloudwafInstance"));

export { CorpIntegrationArgs, CorpIntegrationState } from "./corpIntegration";
export type CorpIntegration = import("./corpIntegration").CorpIntegration;
export const CorpIntegration: typeof import("./corpIntegration").CorpIntegration = null as any;
utilities.lazyLoad(exports, ["CorpIntegration"], () => require("./corpIntegration"));

export { CorpListArgs, CorpListState } from "./corpList";
export type CorpList = import("./corpList").CorpList;
export const CorpList: typeof import("./corpList").CorpList = null as any;
utilities.lazyLoad(exports, ["CorpList"], () => require("./corpList"));

export { CorpRuleArgs, CorpRuleState } from "./corpRule";
export type CorpRule = import("./corpRule").CorpRule;
export const CorpRule: typeof import("./corpRule").CorpRule = null as any;
utilities.lazyLoad(exports, ["CorpRule"], () => require("./corpRule"));

export { CorpSignalTagArgs, CorpSignalTagState } from "./corpSignalTag";
export type CorpSignalTag = import("./corpSignalTag").CorpSignalTag;
export const CorpSignalTag: typeof import("./corpSignalTag").CorpSignalTag = null as any;
utilities.lazyLoad(exports, ["CorpSignalTag"], () => require("./corpSignalTag"));

export { EdgeDeploymentArgs, EdgeDeploymentState } from "./edgeDeployment";
export type EdgeDeployment = import("./edgeDeployment").EdgeDeployment;
export const EdgeDeployment: typeof import("./edgeDeployment").EdgeDeployment = null as any;
utilities.lazyLoad(exports, ["EdgeDeployment"], () => require("./edgeDeployment"));

export { EdgeDeploymentServiceArgs, EdgeDeploymentServiceState } from "./edgeDeploymentService";
export type EdgeDeploymentService = import("./edgeDeploymentService").EdgeDeploymentService;
export const EdgeDeploymentService: typeof import("./edgeDeploymentService").EdgeDeploymentService = null as any;
utilities.lazyLoad(exports, ["EdgeDeploymentService"], () => require("./edgeDeploymentService"));

export { EdgeDeploymentServiceBackendArgs, EdgeDeploymentServiceBackendState } from "./edgeDeploymentServiceBackend";
export type EdgeDeploymentServiceBackend = import("./edgeDeploymentServiceBackend").EdgeDeploymentServiceBackend;
export const EdgeDeploymentServiceBackend: typeof import("./edgeDeploymentServiceBackend").EdgeDeploymentServiceBackend = null as any;
utilities.lazyLoad(exports, ["EdgeDeploymentServiceBackend"], () => require("./edgeDeploymentServiceBackend"));

export { GetSitesArgs, GetSitesResult, GetSitesOutputArgs } from "./getSites";
export const getSites: typeof import("./getSites").getSites = null as any;
export const getSitesOutput: typeof import("./getSites").getSitesOutput = null as any;
utilities.lazyLoad(exports, ["getSites","getSitesOutput"], () => require("./getSites"));

export * from "./provider";
import { Provider } from "./provider";

export { SiteArgs, SiteState } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SiteAgentAlertArgs, SiteAgentAlertState } from "./siteAgentAlert";
export type SiteAgentAlert = import("./siteAgentAlert").SiteAgentAlert;
export const SiteAgentAlert: typeof import("./siteAgentAlert").SiteAgentAlert = null as any;
utilities.lazyLoad(exports, ["SiteAgentAlert"], () => require("./siteAgentAlert"));

export { SiteAlertArgs, SiteAlertState } from "./siteAlert";
export type SiteAlert = import("./siteAlert").SiteAlert;
export const SiteAlert: typeof import("./siteAlert").SiteAlert = null as any;
utilities.lazyLoad(exports, ["SiteAlert"], () => require("./siteAlert"));

export { SiteAllowlistArgs, SiteAllowlistState } from "./siteAllowlist";
export type SiteAllowlist = import("./siteAllowlist").SiteAllowlist;
export const SiteAllowlist: typeof import("./siteAllowlist").SiteAllowlist = null as any;
utilities.lazyLoad(exports, ["SiteAllowlist"], () => require("./siteAllowlist"));

export { SiteBlocklistArgs, SiteBlocklistState } from "./siteBlocklist";
export type SiteBlocklist = import("./siteBlocklist").SiteBlocklist;
export const SiteBlocklist: typeof import("./siteBlocklist").SiteBlocklist = null as any;
utilities.lazyLoad(exports, ["SiteBlocklist"], () => require("./siteBlocklist"));

export { SiteHeaderLinkArgs, SiteHeaderLinkState } from "./siteHeaderLink";
export type SiteHeaderLink = import("./siteHeaderLink").SiteHeaderLink;
export const SiteHeaderLink: typeof import("./siteHeaderLink").SiteHeaderLink = null as any;
utilities.lazyLoad(exports, ["SiteHeaderLink"], () => require("./siteHeaderLink"));

export { SiteIntegrationArgs, SiteIntegrationState } from "./siteIntegration";
export type SiteIntegration = import("./siteIntegration").SiteIntegration;
export const SiteIntegration: typeof import("./siteIntegration").SiteIntegration = null as any;
utilities.lazyLoad(exports, ["SiteIntegration"], () => require("./siteIntegration"));

export { SiteListArgs, SiteListState } from "./siteList";
export type SiteList = import("./siteList").SiteList;
export const SiteList: typeof import("./siteList").SiteList = null as any;
utilities.lazyLoad(exports, ["SiteList"], () => require("./siteList"));

export { SiteRedactionArgs, SiteRedactionState } from "./siteRedaction";
export type SiteRedaction = import("./siteRedaction").SiteRedaction;
export const SiteRedaction: typeof import("./siteRedaction").SiteRedaction = null as any;
utilities.lazyLoad(exports, ["SiteRedaction"], () => require("./siteRedaction"));

export { SiteRuleArgs, SiteRuleState } from "./siteRule";
export type SiteRule = import("./siteRule").SiteRule;
export const SiteRule: typeof import("./siteRule").SiteRule = null as any;
utilities.lazyLoad(exports, ["SiteRule"], () => require("./siteRule"));

export { SiteSignalTagArgs, SiteSignalTagState } from "./siteSignalTag";
export type SiteSignalTag = import("./siteSignalTag").SiteSignalTag;
export const SiteSignalTag: typeof import("./siteSignalTag").SiteSignalTag = null as any;
utilities.lazyLoad(exports, ["SiteSignalTag"], () => require("./siteSignalTag"));

export { SiteTemplatedRuleArgs, SiteTemplatedRuleState } from "./siteTemplatedRule";
export type SiteTemplatedRule = import("./siteTemplatedRule").SiteTemplatedRule;
export const SiteTemplatedRule: typeof import("./siteTemplatedRule").SiteTemplatedRule = null as any;
utilities.lazyLoad(exports, ["SiteTemplatedRule"], () => require("./siteTemplatedRule"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sigsci:index/corpCloudwafCertificate:CorpCloudwafCertificate":
                return new CorpCloudwafCertificate(name, <any>undefined, { urn })
            case "sigsci:index/corpCloudwafInstance:CorpCloudwafInstance":
                return new CorpCloudwafInstance(name, <any>undefined, { urn })
            case "sigsci:index/corpIntegration:CorpIntegration":
                return new CorpIntegration(name, <any>undefined, { urn })
            case "sigsci:index/corpList:CorpList":
                return new CorpList(name, <any>undefined, { urn })
            case "sigsci:index/corpRule:CorpRule":
                return new CorpRule(name, <any>undefined, { urn })
            case "sigsci:index/corpSignalTag:CorpSignalTag":
                return new CorpSignalTag(name, <any>undefined, { urn })
            case "sigsci:index/edgeDeployment:EdgeDeployment":
                return new EdgeDeployment(name, <any>undefined, { urn })
            case "sigsci:index/edgeDeploymentService:EdgeDeploymentService":
                return new EdgeDeploymentService(name, <any>undefined, { urn })
            case "sigsci:index/edgeDeploymentServiceBackend:EdgeDeploymentServiceBackend":
                return new EdgeDeploymentServiceBackend(name, <any>undefined, { urn })
            case "sigsci:index/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "sigsci:index/siteAgentAlert:SiteAgentAlert":
                return new SiteAgentAlert(name, <any>undefined, { urn })
            case "sigsci:index/siteAlert:SiteAlert":
                return new SiteAlert(name, <any>undefined, { urn })
            case "sigsci:index/siteAllowlist:SiteAllowlist":
                return new SiteAllowlist(name, <any>undefined, { urn })
            case "sigsci:index/siteBlocklist:SiteBlocklist":
                return new SiteBlocklist(name, <any>undefined, { urn })
            case "sigsci:index/siteHeaderLink:SiteHeaderLink":
                return new SiteHeaderLink(name, <any>undefined, { urn })
            case "sigsci:index/siteIntegration:SiteIntegration":
                return new SiteIntegration(name, <any>undefined, { urn })
            case "sigsci:index/siteList:SiteList":
                return new SiteList(name, <any>undefined, { urn })
            case "sigsci:index/siteRedaction:SiteRedaction":
                return new SiteRedaction(name, <any>undefined, { urn })
            case "sigsci:index/siteRule:SiteRule":
                return new SiteRule(name, <any>undefined, { urn })
            case "sigsci:index/siteSignalTag:SiteSignalTag":
                return new SiteSignalTag(name, <any>undefined, { urn })
            case "sigsci:index/siteTemplatedRule:SiteTemplatedRule":
                return new SiteTemplatedRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sigsci", "index/corpCloudwafCertificate", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/corpCloudwafInstance", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/corpIntegration", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/corpList", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/corpRule", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/corpSignalTag", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/edgeDeployment", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/edgeDeploymentService", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/edgeDeploymentServiceBackend", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/site", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteAgentAlert", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteAlert", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteAllowlist", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteBlocklist", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteHeaderLink", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteIntegration", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteList", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteRedaction", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteRule", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteSignalTag", _module)
pulumi.runtime.registerResourceModule("sigsci", "index/siteTemplatedRule", _module)
pulumi.runtime.registerResourcePackage("sigsci", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sigsci") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
