// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SiteBlocklist extends pulumi.CustomResource {
    /**
     * Get an existing SiteBlocklist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteBlocklistState, opts?: pulumi.CustomResourceOptions): SiteBlocklist {
        return new SiteBlocklist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sigsci:index/siteBlocklist:SiteBlocklist';

    /**
     * Returns true if the given object is an instance of SiteBlocklist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteBlocklist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteBlocklist.__pulumiType;
    }

    /**
     * Optional RFC3339-formatted datetime in the future. Omit this paramater if it does not expire.
     */
    public readonly expires!: pulumi.Output<string | undefined>;
    /**
     * Note/Description associated with the tag.
     */
    public readonly note!: pulumi.Output<string>;
    public readonly siteBlocklistId!: pulumi.Output<string>;
    /**
     * Site short name
     */
    public readonly siteShortName!: pulumi.Output<string>;
    /**
     * Source IP Address to Blocklist
     */
    public readonly source!: pulumi.Output<string>;

    /**
     * Create a SiteBlocklist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteBlocklistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteBlocklistArgs | SiteBlocklistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteBlocklistState | undefined;
            resourceInputs["expires"] = state ? state.expires : undefined;
            resourceInputs["note"] = state ? state.note : undefined;
            resourceInputs["siteBlocklistId"] = state ? state.siteBlocklistId : undefined;
            resourceInputs["siteShortName"] = state ? state.siteShortName : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
        } else {
            const args = argsOrState as SiteBlocklistArgs | undefined;
            if ((!args || args.note === undefined) && !opts.urn) {
                throw new Error("Missing required property 'note'");
            }
            if ((!args || args.siteShortName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteShortName'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["expires"] = args ? args.expires : undefined;
            resourceInputs["note"] = args ? args.note : undefined;
            resourceInputs["siteBlocklistId"] = args ? args.siteBlocklistId : undefined;
            resourceInputs["siteShortName"] = args ? args.siteShortName : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteBlocklist.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteBlocklist resources.
 */
export interface SiteBlocklistState {
    /**
     * Optional RFC3339-formatted datetime in the future. Omit this paramater if it does not expire.
     */
    expires?: pulumi.Input<string>;
    /**
     * Note/Description associated with the tag.
     */
    note?: pulumi.Input<string>;
    siteBlocklistId?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName?: pulumi.Input<string>;
    /**
     * Source IP Address to Blocklist
     */
    source?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SiteBlocklist resource.
 */
export interface SiteBlocklistArgs {
    /**
     * Optional RFC3339-formatted datetime in the future. Omit this paramater if it does not expire.
     */
    expires?: pulumi.Input<string>;
    /**
     * Note/Description associated with the tag.
     */
    note: pulumi.Input<string>;
    siteBlocklistId?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName: pulumi.Input<string>;
    /**
     * Source IP Address to Blocklist
     */
    source: pulumi.Input<string>;
}
