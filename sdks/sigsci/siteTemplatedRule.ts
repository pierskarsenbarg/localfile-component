// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SiteTemplatedRule extends pulumi.CustomResource {
    /**
     * Get an existing SiteTemplatedRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteTemplatedRuleState, opts?: pulumi.CustomResourceOptions): SiteTemplatedRule {
        return new SiteTemplatedRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sigsci:index/siteTemplatedRule:SiteTemplatedRule';

    /**
     * Returns true if the given object is an instance of SiteTemplatedRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteTemplatedRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteTemplatedRule.__pulumiType;
    }

    /**
     * Alerts
     */
    public readonly alerts!: pulumi.Output<outputs.SiteTemplatedRuleAlert[] | undefined>;
    /**
     * description
     */
    public readonly detections!: pulumi.Output<outputs.SiteTemplatedRuleDetection[]>;
    /**
     * Name of templated rule. This must match an existing templated rule e.g., LOGINATTEMPT, CMDEXE, XSS...
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Site short name
     */
    public readonly siteShortName!: pulumi.Output<string>;
    public readonly siteTemplatedRuleId!: pulumi.Output<string>;

    /**
     * Create a SiteTemplatedRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteTemplatedRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteTemplatedRuleArgs | SiteTemplatedRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteTemplatedRuleState | undefined;
            resourceInputs["alerts"] = state ? state.alerts : undefined;
            resourceInputs["detections"] = state ? state.detections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["siteShortName"] = state ? state.siteShortName : undefined;
            resourceInputs["siteTemplatedRuleId"] = state ? state.siteTemplatedRuleId : undefined;
        } else {
            const args = argsOrState as SiteTemplatedRuleArgs | undefined;
            if ((!args || args.detections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'detections'");
            }
            if ((!args || args.siteShortName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteShortName'");
            }
            resourceInputs["alerts"] = args ? args.alerts : undefined;
            resourceInputs["detections"] = args ? args.detections : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["siteShortName"] = args ? args.siteShortName : undefined;
            resourceInputs["siteTemplatedRuleId"] = args ? args.siteTemplatedRuleId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteTemplatedRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteTemplatedRule resources.
 */
export interface SiteTemplatedRuleState {
    /**
     * Alerts
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.SiteTemplatedRuleAlert>[]>;
    /**
     * description
     */
    detections?: pulumi.Input<pulumi.Input<inputs.SiteTemplatedRuleDetection>[]>;
    /**
     * Name of templated rule. This must match an existing templated rule e.g., LOGINATTEMPT, CMDEXE, XSS...
     */
    name?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName?: pulumi.Input<string>;
    siteTemplatedRuleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SiteTemplatedRule resource.
 */
export interface SiteTemplatedRuleArgs {
    /**
     * Alerts
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.SiteTemplatedRuleAlert>[]>;
    /**
     * description
     */
    detections: pulumi.Input<pulumi.Input<inputs.SiteTemplatedRuleDetection>[]>;
    /**
     * Name of templated rule. This must match an existing templated rule e.g., LOGINATTEMPT, CMDEXE, XSS...
     */
    name?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName: pulumi.Input<string>;
    siteTemplatedRuleId?: pulumi.Input<string>;
}
