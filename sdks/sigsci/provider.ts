// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the sigsci package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'sigsci';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * URL override for testing
     */
    public readonly apiUrl!: pulumi.Output<string | undefined>;
    /**
     * The token used for authentication specify either the password or the token
     */
    public readonly authToken!: pulumi.Output<string | undefined>;
    /**
     * Corp short name (id)
     */
    public readonly corp!: pulumi.Output<string>;
    /**
     * The email to be used for authentication
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The Fastly API key used for deploying Signal Sciences as a Fastly edge security service. For edge deployment service
     * calls, the Fastly key must have write access to the given service.
     */
    public readonly fastlyApiKey!: pulumi.Output<string | undefined>;
    /**
     * The password used to for authentication specify either the password or the token
     */
    public readonly password!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.corp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'corp'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["apiUrl"] = args ? args.apiUrl : undefined;
            resourceInputs["authToken"] = args?.authToken ? pulumi.secret(args.authToken) : undefined;
            resourceInputs["corp"] = args ? args.corp : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["fastlyApiKey"] = args?.fastlyApiKey ? pulumi.secret(args.fastlyApiKey) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["validate"] = pulumi.output(args ? args.validate : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authToken", "fastlyApiKey", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }

    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<{[key: string]: any}> {
        const result: pulumi.Output<Provider.TerraformConfigResult> = pulumi.runtime.call("pulumi:providers:sigsci/terraformConfig", {
            "__self__": this,
        }, this, utilities.getPackage());
        return result.result;
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * URL override for testing
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * The token used for authentication specify either the password or the token
     */
    authToken?: pulumi.Input<string>;
    /**
     * Corp short name (id)
     */
    corp: pulumi.Input<string>;
    /**
     * The email to be used for authentication
     */
    email: pulumi.Input<string>;
    /**
     * The Fastly API key used for deploying Signal Sciences as a Fastly edge security service. For edge deployment service
     * calls, the Fastly key must have write access to the given service.
     */
    fastlyApiKey?: pulumi.Input<string>;
    /**
     * The password used to for authentication specify either the password or the token
     */
    password?: pulumi.Input<string>;
    /**
     * Enable validation of API credentials during provider initialization. Default is true.
     */
    validate?: pulumi.Input<boolean>;
}

export namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    export interface TerraformConfigResult {
        readonly result: {[key: string]: any};
    }

}
