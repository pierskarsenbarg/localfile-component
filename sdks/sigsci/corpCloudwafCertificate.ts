// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CorpCloudwafCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CorpCloudwafCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CorpCloudwafCertificateState, opts?: pulumi.CustomResourceOptions): CorpCloudwafCertificate {
        return new CorpCloudwafCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sigsci:index/corpCloudwafCertificate:CorpCloudwafCertificate';

    /**
     * Returns true if the given object is an instance of CorpCloudwafCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CorpCloudwafCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CorpCloudwafCertificate.__pulumiType;
    }

    /**
     * Body of the certificate in PEM format
     */
    public readonly certificateBody!: pulumi.Output<string>;
    /**
     * Certificate chain in PEM format
     */
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    /**
     * Common name of the uploaded certificate
     */
    public /*out*/ readonly commonName!: pulumi.Output<string>;
    public readonly corpCloudwafCertificateId!: pulumi.Output<string>;
    /**
     * TimeStamp for when certificate expires in RFC3339 date time format
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    /**
     * SHA1 fingerprint of the certififcate
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * Friendly name to identify a CloudWAF certificate
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Private key of the certificate in PEM format - must be unencrypted
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * Current status of the certificate - could be one of "unknown", "active", "pendingverification", "expired", "error"
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Subject alternative names from the uploaded certificate
     */
    public /*out*/ readonly subjectAlternativeNames!: pulumi.Output<string[]>;

    /**
     * Create a CorpCloudwafCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CorpCloudwafCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CorpCloudwafCertificateArgs | CorpCloudwafCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CorpCloudwafCertificateState | undefined;
            resourceInputs["certificateBody"] = state ? state.certificateBody : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["corpCloudwafCertificateId"] = state ? state.corpCloudwafCertificateId : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
        } else {
            const args = argsOrState as CorpCloudwafCertificateArgs | undefined;
            if ((!args || args.certificateBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateBody'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["certificateBody"] = args ? args.certificateBody : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["corpCloudwafCertificateId"] = args ? args.corpCloudwafCertificateId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["commonName"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subjectAlternativeNames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CorpCloudwafCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CorpCloudwafCertificate resources.
 */
export interface CorpCloudwafCertificateState {
    /**
     * Body of the certificate in PEM format
     */
    certificateBody?: pulumi.Input<string>;
    /**
     * Certificate chain in PEM format
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * Common name of the uploaded certificate
     */
    commonName?: pulumi.Input<string>;
    corpCloudwafCertificateId?: pulumi.Input<string>;
    /**
     * TimeStamp for when certificate expires in RFC3339 date time format
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * SHA1 fingerprint of the certififcate
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * Friendly name to identify a CloudWAF certificate
     */
    name?: pulumi.Input<string>;
    /**
     * Private key of the certificate in PEM format - must be unencrypted
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Current status of the certificate - could be one of "unknown", "active", "pendingverification", "expired", "error"
     */
    status?: pulumi.Input<string>;
    /**
     * Subject alternative names from the uploaded certificate
     */
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CorpCloudwafCertificate resource.
 */
export interface CorpCloudwafCertificateArgs {
    /**
     * Body of the certificate in PEM format
     */
    certificateBody: pulumi.Input<string>;
    /**
     * Certificate chain in PEM format
     */
    certificateChain?: pulumi.Input<string>;
    corpCloudwafCertificateId?: pulumi.Input<string>;
    /**
     * Friendly name to identify a CloudWAF certificate
     */
    name?: pulumi.Input<string>;
    /**
     * Private key of the certificate in PEM format - must be unencrypted
     */
    privateKey: pulumi.Input<string>;
}
