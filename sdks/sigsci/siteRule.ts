// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SiteRule extends pulumi.CustomResource {
    /**
     * Get an existing SiteRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteRuleState, opts?: pulumi.CustomResourceOptions): SiteRule {
        return new SiteRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sigsci:index/siteRule:SiteRule';

    /**
     * Returns true if the given object is an instance of SiteRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteRule.__pulumiType;
    }

    /**
     * Actions
     */
    public readonly actions!: pulumi.Output<outputs.SiteRuleAction[] | undefined>;
    /**
     * Conditions
     */
    public readonly conditions!: pulumi.Output<outputs.SiteRuleCondition[]>;
    /**
     * enable the rule
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Date the rule will automatically be disabled. If rule is always enabled, will return empty string
     */
    public readonly expiration!: pulumi.Output<string>;
    /**
     * Conditions that must be matched when evaluating the request (all, any)
     */
    public readonly groupOperator!: pulumi.Output<string>;
    /**
     * Rate Limit
     */
    public readonly rateLimit!: pulumi.Output<outputs.SiteRuleRateLimit | undefined>;
    /**
     * Description of the rule
     */
    public readonly reason!: pulumi.Output<string>;
    /**
     * Indicates whether to store the logs for requests that match the rule's conditions (sampled) or not store them (none).
     * This field is only available for rules of type `request`. Not valid for `signal` or `rateLimit`.
     */
    public readonly requestlogging!: pulumi.Output<string | undefined>;
    /**
     * The signal id of the signal being excluded
     */
    public readonly signal!: pulumi.Output<string | undefined>;
    public readonly siteRuleId!: pulumi.Output<string>;
    /**
     * Site short name
     */
    public readonly siteShortName!: pulumi.Output<string>;
    /**
     * Type of rule (request, signal, rateLimit)
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SiteRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteRuleArgs | SiteRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteRuleState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expiration"] = state ? state.expiration : undefined;
            resourceInputs["groupOperator"] = state ? state.groupOperator : undefined;
            resourceInputs["rateLimit"] = state ? state.rateLimit : undefined;
            resourceInputs["reason"] = state ? state.reason : undefined;
            resourceInputs["requestlogging"] = state ? state.requestlogging : undefined;
            resourceInputs["signal"] = state ? state.signal : undefined;
            resourceInputs["siteRuleId"] = state ? state.siteRuleId : undefined;
            resourceInputs["siteShortName"] = state ? state.siteShortName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SiteRuleArgs | undefined;
            if ((!args || args.conditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.expiration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expiration'");
            }
            if ((!args || args.groupOperator === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupOperator'");
            }
            if ((!args || args.reason === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reason'");
            }
            if ((!args || args.siteShortName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteShortName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["expiration"] = args ? args.expiration : undefined;
            resourceInputs["groupOperator"] = args ? args.groupOperator : undefined;
            resourceInputs["rateLimit"] = args ? args.rateLimit : undefined;
            resourceInputs["reason"] = args ? args.reason : undefined;
            resourceInputs["requestlogging"] = args ? args.requestlogging : undefined;
            resourceInputs["signal"] = args ? args.signal : undefined;
            resourceInputs["siteRuleId"] = args ? args.siteRuleId : undefined;
            resourceInputs["siteShortName"] = args ? args.siteShortName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteRule resources.
 */
export interface SiteRuleState {
    /**
     * Actions
     */
    actions?: pulumi.Input<pulumi.Input<inputs.SiteRuleAction>[]>;
    /**
     * Conditions
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.SiteRuleCondition>[]>;
    /**
     * enable the rule
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Date the rule will automatically be disabled. If rule is always enabled, will return empty string
     */
    expiration?: pulumi.Input<string>;
    /**
     * Conditions that must be matched when evaluating the request (all, any)
     */
    groupOperator?: pulumi.Input<string>;
    /**
     * Rate Limit
     */
    rateLimit?: pulumi.Input<inputs.SiteRuleRateLimit>;
    /**
     * Description of the rule
     */
    reason?: pulumi.Input<string>;
    /**
     * Indicates whether to store the logs for requests that match the rule's conditions (sampled) or not store them (none).
     * This field is only available for rules of type `request`. Not valid for `signal` or `rateLimit`.
     */
    requestlogging?: pulumi.Input<string>;
    /**
     * The signal id of the signal being excluded
     */
    signal?: pulumi.Input<string>;
    siteRuleId?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName?: pulumi.Input<string>;
    /**
     * Type of rule (request, signal, rateLimit)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SiteRule resource.
 */
export interface SiteRuleArgs {
    /**
     * Actions
     */
    actions?: pulumi.Input<pulumi.Input<inputs.SiteRuleAction>[]>;
    /**
     * Conditions
     */
    conditions: pulumi.Input<pulumi.Input<inputs.SiteRuleCondition>[]>;
    /**
     * enable the rule
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Date the rule will automatically be disabled. If rule is always enabled, will return empty string
     */
    expiration: pulumi.Input<string>;
    /**
     * Conditions that must be matched when evaluating the request (all, any)
     */
    groupOperator: pulumi.Input<string>;
    /**
     * Rate Limit
     */
    rateLimit?: pulumi.Input<inputs.SiteRuleRateLimit>;
    /**
     * Description of the rule
     */
    reason: pulumi.Input<string>;
    /**
     * Indicates whether to store the logs for requests that match the rule's conditions (sampled) or not store them (none).
     * This field is only available for rules of type `request`. Not valid for `signal` or `rateLimit`.
     */
    requestlogging?: pulumi.Input<string>;
    /**
     * The signal id of the signal being excluded
     */
    signal?: pulumi.Input<string>;
    siteRuleId?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName: pulumi.Input<string>;
    /**
     * Type of rule (request, signal, rateLimit)
     */
    type: pulumi.Input<string>;
}
