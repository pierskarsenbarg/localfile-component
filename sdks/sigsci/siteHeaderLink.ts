// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SiteHeaderLink extends pulumi.CustomResource {
    /**
     * Get an existing SiteHeaderLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteHeaderLinkState, opts?: pulumi.CustomResourceOptions): SiteHeaderLink {
        return new SiteHeaderLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sigsci:index/siteHeaderLink:SiteHeaderLink';

    /**
     * Returns true if the given object is an instance of SiteHeaderLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteHeaderLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteHeaderLink.__pulumiType;
    }

    /**
     * External link
     */
    public readonly link!: pulumi.Output<string>;
    /**
     * Name of header link for display purposes
     */
    public readonly linkName!: pulumi.Output<string | undefined>;
    /**
     * Descriptive list name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly siteHeaderLinkId!: pulumi.Output<string>;
    /**
     * Site short name
     */
    public readonly siteShortName!: pulumi.Output<string>;
    /**
     * The type of header, either 'request' or 'response'
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SiteHeaderLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteHeaderLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteHeaderLinkArgs | SiteHeaderLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteHeaderLinkState | undefined;
            resourceInputs["link"] = state ? state.link : undefined;
            resourceInputs["linkName"] = state ? state.linkName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["siteHeaderLinkId"] = state ? state.siteHeaderLinkId : undefined;
            resourceInputs["siteShortName"] = state ? state.siteShortName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SiteHeaderLinkArgs | undefined;
            if ((!args || args.link === undefined) && !opts.urn) {
                throw new Error("Missing required property 'link'");
            }
            if ((!args || args.siteShortName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteShortName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["link"] = args ? args.link : undefined;
            resourceInputs["linkName"] = args ? args.linkName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["siteHeaderLinkId"] = args ? args.siteHeaderLinkId : undefined;
            resourceInputs["siteShortName"] = args ? args.siteShortName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteHeaderLink.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteHeaderLink resources.
 */
export interface SiteHeaderLinkState {
    /**
     * External link
     */
    link?: pulumi.Input<string>;
    /**
     * Name of header link for display purposes
     */
    linkName?: pulumi.Input<string>;
    /**
     * Descriptive list name
     */
    name?: pulumi.Input<string>;
    siteHeaderLinkId?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName?: pulumi.Input<string>;
    /**
     * The type of header, either 'request' or 'response'
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SiteHeaderLink resource.
 */
export interface SiteHeaderLinkArgs {
    /**
     * External link
     */
    link: pulumi.Input<string>;
    /**
     * Name of header link for display purposes
     */
    linkName?: pulumi.Input<string>;
    /**
     * Descriptive list name
     */
    name?: pulumi.Input<string>;
    siteHeaderLinkId?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName: pulumi.Input<string>;
    /**
     * The type of header, either 'request' or 'response'
     */
    type: pulumi.Input<string>;
}
