// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CorpSignalTag extends pulumi.CustomResource {
    /**
     * Get an existing CorpSignalTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CorpSignalTagState, opts?: pulumi.CustomResourceOptions): CorpSignalTag {
        return new CorpSignalTag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sigsci:index/corpSignalTag:CorpSignalTag';

    /**
     * Returns true if the given object is an instance of CorpSignalTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CorpSignalTag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CorpSignalTag.__pulumiType;
    }

    /**
     * configurable
     */
    public /*out*/ readonly configurable!: pulumi.Output<boolean>;
    public readonly corpSignalTagId!: pulumi.Output<string>;
    /**
     * Optional signal tag description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * informational
     */
    public /*out*/ readonly informational!: pulumi.Output<boolean>;
    /**
     * need response
     */
    public /*out*/ readonly needsResponse!: pulumi.Output<boolean>;
    /**
     * The display name of the signal tag. Must be 3-25 char.
     */
    public readonly shortName!: pulumi.Output<string>;

    /**
     * Create a CorpSignalTag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CorpSignalTagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CorpSignalTagArgs | CorpSignalTagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CorpSignalTagState | undefined;
            resourceInputs["configurable"] = state ? state.configurable : undefined;
            resourceInputs["corpSignalTagId"] = state ? state.corpSignalTagId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["informational"] = state ? state.informational : undefined;
            resourceInputs["needsResponse"] = state ? state.needsResponse : undefined;
            resourceInputs["shortName"] = state ? state.shortName : undefined;
        } else {
            const args = argsOrState as CorpSignalTagArgs | undefined;
            if ((!args || args.shortName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shortName'");
            }
            resourceInputs["corpSignalTagId"] = args ? args.corpSignalTagId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["shortName"] = args ? args.shortName : undefined;
            resourceInputs["configurable"] = undefined /*out*/;
            resourceInputs["informational"] = undefined /*out*/;
            resourceInputs["needsResponse"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CorpSignalTag.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CorpSignalTag resources.
 */
export interface CorpSignalTagState {
    /**
     * configurable
     */
    configurable?: pulumi.Input<boolean>;
    corpSignalTagId?: pulumi.Input<string>;
    /**
     * Optional signal tag description
     */
    description?: pulumi.Input<string>;
    /**
     * informational
     */
    informational?: pulumi.Input<boolean>;
    /**
     * need response
     */
    needsResponse?: pulumi.Input<boolean>;
    /**
     * The display name of the signal tag. Must be 3-25 char.
     */
    shortName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CorpSignalTag resource.
 */
export interface CorpSignalTagArgs {
    corpSignalTagId?: pulumi.Input<string>;
    /**
     * Optional signal tag description
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the signal tag. Must be 3-25 char.
     */
    shortName: pulumi.Input<string>;
}
