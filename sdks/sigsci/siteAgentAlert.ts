// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SiteAgentAlert extends pulumi.CustomResource {
    /**
     * Get an existing SiteAgentAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteAgentAlertState, opts?: pulumi.CustomResourceOptions): SiteAgentAlert {
        return new SiteAgentAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sigsci:index/siteAgentAlert:SiteAgentAlert';

    /**
     * Returns true if the given object is an instance of SiteAgentAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteAgentAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteAgentAlert.__pulumiType;
    }

    /**
     * Action for agent alert.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The number of seconds this alert is active.
     */
    public readonly blockDurationSeconds!: pulumi.Output<number | undefined>;
    /**
     * A flag to toggle this alert.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Field_name for agent alert.
     */
    public readonly fieldName!: pulumi.Output<string>;
    /**
     * Integer value for interval. Must be 5, 10, or 60.
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * description
     */
    public readonly longName!: pulumi.Output<string | undefined>;
    /**
     * Operator for agent alert.
     */
    public readonly operator!: pulumi.Output<string>;
    public readonly siteAgentAlertId!: pulumi.Output<string>;
    /**
     * Site short name
     */
    public readonly siteShortName!: pulumi.Output<string>;
    /**
     * A flag to skip notifications
     */
    public readonly skipNotifications!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the tag whose occurrences the alert is watching. Must match an existing tag
     */
    public readonly tagName!: pulumi.Output<string>;
    /**
     * The number of occurrences of the tag in the interval needed to trigger the alert. Min 0, Max 3600000
     */
    public readonly threshold!: pulumi.Output<number>;

    /**
     * Create a SiteAgentAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteAgentAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteAgentAlertArgs | SiteAgentAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteAgentAlertState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["blockDurationSeconds"] = state ? state.blockDurationSeconds : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fieldName"] = state ? state.fieldName : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["longName"] = state ? state.longName : undefined;
            resourceInputs["operator"] = state ? state.operator : undefined;
            resourceInputs["siteAgentAlertId"] = state ? state.siteAgentAlertId : undefined;
            resourceInputs["siteShortName"] = state ? state.siteShortName : undefined;
            resourceInputs["skipNotifications"] = state ? state.skipNotifications : undefined;
            resourceInputs["tagName"] = state ? state.tagName : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
        } else {
            const args = argsOrState as SiteAgentAlertArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.fieldName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fieldName'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.operator === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operator'");
            }
            if ((!args || args.siteShortName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteShortName'");
            }
            if ((!args || args.tagName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagName'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["blockDurationSeconds"] = args ? args.blockDurationSeconds : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fieldName"] = args ? args.fieldName : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["longName"] = args ? args.longName : undefined;
            resourceInputs["operator"] = args ? args.operator : undefined;
            resourceInputs["siteAgentAlertId"] = args ? args.siteAgentAlertId : undefined;
            resourceInputs["siteShortName"] = args ? args.siteShortName : undefined;
            resourceInputs["skipNotifications"] = args ? args.skipNotifications : undefined;
            resourceInputs["tagName"] = args ? args.tagName : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteAgentAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteAgentAlert resources.
 */
export interface SiteAgentAlertState {
    /**
     * Action for agent alert.
     */
    action?: pulumi.Input<string>;
    /**
     * The number of seconds this alert is active.
     */
    blockDurationSeconds?: pulumi.Input<number>;
    /**
     * A flag to toggle this alert.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Field_name for agent alert.
     */
    fieldName?: pulumi.Input<string>;
    /**
     * Integer value for interval. Must be 5, 10, or 60.
     */
    interval?: pulumi.Input<number>;
    /**
     * description
     */
    longName?: pulumi.Input<string>;
    /**
     * Operator for agent alert.
     */
    operator?: pulumi.Input<string>;
    siteAgentAlertId?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName?: pulumi.Input<string>;
    /**
     * A flag to skip notifications
     */
    skipNotifications?: pulumi.Input<boolean>;
    /**
     * The name of the tag whose occurrences the alert is watching. Must match an existing tag
     */
    tagName?: pulumi.Input<string>;
    /**
     * The number of occurrences of the tag in the interval needed to trigger the alert. Min 0, Max 3600000
     */
    threshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SiteAgentAlert resource.
 */
export interface SiteAgentAlertArgs {
    /**
     * Action for agent alert.
     */
    action: pulumi.Input<string>;
    /**
     * The number of seconds this alert is active.
     */
    blockDurationSeconds?: pulumi.Input<number>;
    /**
     * A flag to toggle this alert.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Field_name for agent alert.
     */
    fieldName: pulumi.Input<string>;
    /**
     * Integer value for interval. Must be 5, 10, or 60.
     */
    interval: pulumi.Input<number>;
    /**
     * description
     */
    longName?: pulumi.Input<string>;
    /**
     * Operator for agent alert.
     */
    operator: pulumi.Input<string>;
    siteAgentAlertId?: pulumi.Input<string>;
    /**
     * Site short name
     */
    siteShortName: pulumi.Input<string>;
    /**
     * A flag to skip notifications
     */
    skipNotifications?: pulumi.Input<boolean>;
    /**
     * The name of the tag whose occurrences the alert is watching. Must match an existing tag
     */
    tagName: pulumi.Input<string>;
    /**
     * The number of occurrences of the tag in the interval needed to trigger the alert. Min 0, Max 3600000
     */
    threshold: pulumi.Input<number>;
}
