// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Site extends pulumi.CustomResource {
    /**
     * Get an existing Site resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteState, opts?: pulumi.CustomResourceOptions): Site {
        return new Site(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sigsci:index/site:Site';

    /**
     * Returns true if the given object is an instance of Site.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Site {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Site.__pulumiType;
    }

    /**
     * Agent IP anonymization mode - "" (empty string) or 'EU'
     */
    public readonly agentAnonMode!: pulumi.Output<string | undefined>;
    /**
     * Agent action level - 'block', 'log' or 'off'
     */
    public readonly agentLevel!: pulumi.Output<string | undefined>;
    /**
     * List entries
     */
    public readonly attackThresholds!: pulumi.Output<outputs.SiteAttackThreshold[] | undefined>;
    /**
     * Duration to block an IP in seconds
     */
    public readonly blockDurationSeconds!: pulumi.Output<number | undefined>;
    /**
     * HTTP response code to send when traffic is being blocked
     */
    public readonly blockHttpCode!: pulumi.Output<number | undefined>;
    /**
     * URL to redirect to when blocking with a '301' or '302' HTTP status code
     */
    public readonly blockRedirectUrl!: pulumi.Output<string | undefined>;
    /**
     * Headers used for assigning client IPs to requests
     */
    public readonly clientIpRules!: pulumi.Output<string[] | undefined>;
    /**
     * Display name of the site
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Immediately block requests that contain attack signals
     */
    public readonly immediateBlock!: pulumi.Output<boolean | undefined>;
    /**
     * The sites primary Agent key
     */
    public /*out*/ readonly primaryAgentKey!: pulumi.Output<{[key: string]: string}>;
    /**
     * Identifying name of the site
     */
    public readonly shortName!: pulumi.Output<string>;
    public readonly siteId!: pulumi.Output<string>;

    /**
     * Create a Site resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteArgs | SiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteState | undefined;
            resourceInputs["agentAnonMode"] = state ? state.agentAnonMode : undefined;
            resourceInputs["agentLevel"] = state ? state.agentLevel : undefined;
            resourceInputs["attackThresholds"] = state ? state.attackThresholds : undefined;
            resourceInputs["blockDurationSeconds"] = state ? state.blockDurationSeconds : undefined;
            resourceInputs["blockHttpCode"] = state ? state.blockHttpCode : undefined;
            resourceInputs["blockRedirectUrl"] = state ? state.blockRedirectUrl : undefined;
            resourceInputs["clientIpRules"] = state ? state.clientIpRules : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["immediateBlock"] = state ? state.immediateBlock : undefined;
            resourceInputs["primaryAgentKey"] = state ? state.primaryAgentKey : undefined;
            resourceInputs["shortName"] = state ? state.shortName : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
        } else {
            const args = argsOrState as SiteArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.shortName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shortName'");
            }
            resourceInputs["agentAnonMode"] = args ? args.agentAnonMode : undefined;
            resourceInputs["agentLevel"] = args ? args.agentLevel : undefined;
            resourceInputs["attackThresholds"] = args ? args.attackThresholds : undefined;
            resourceInputs["blockDurationSeconds"] = args ? args.blockDurationSeconds : undefined;
            resourceInputs["blockHttpCode"] = args ? args.blockHttpCode : undefined;
            resourceInputs["blockRedirectUrl"] = args ? args.blockRedirectUrl : undefined;
            resourceInputs["clientIpRules"] = args ? args.clientIpRules : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["immediateBlock"] = args ? args.immediateBlock : undefined;
            resourceInputs["shortName"] = args ? args.shortName : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["primaryAgentKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryAgentKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Site.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Site resources.
 */
export interface SiteState {
    /**
     * Agent IP anonymization mode - "" (empty string) or 'EU'
     */
    agentAnonMode?: pulumi.Input<string>;
    /**
     * Agent action level - 'block', 'log' or 'off'
     */
    agentLevel?: pulumi.Input<string>;
    /**
     * List entries
     */
    attackThresholds?: pulumi.Input<pulumi.Input<inputs.SiteAttackThreshold>[]>;
    /**
     * Duration to block an IP in seconds
     */
    blockDurationSeconds?: pulumi.Input<number>;
    /**
     * HTTP response code to send when traffic is being blocked
     */
    blockHttpCode?: pulumi.Input<number>;
    /**
     * URL to redirect to when blocking with a '301' or '302' HTTP status code
     */
    blockRedirectUrl?: pulumi.Input<string>;
    /**
     * Headers used for assigning client IPs to requests
     */
    clientIpRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name of the site
     */
    displayName?: pulumi.Input<string>;
    /**
     * Immediately block requests that contain attack signals
     */
    immediateBlock?: pulumi.Input<boolean>;
    /**
     * The sites primary Agent key
     */
    primaryAgentKey?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Identifying name of the site
     */
    shortName?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Site resource.
 */
export interface SiteArgs {
    /**
     * Agent IP anonymization mode - "" (empty string) or 'EU'
     */
    agentAnonMode?: pulumi.Input<string>;
    /**
     * Agent action level - 'block', 'log' or 'off'
     */
    agentLevel?: pulumi.Input<string>;
    /**
     * List entries
     */
    attackThresholds?: pulumi.Input<pulumi.Input<inputs.SiteAttackThreshold>[]>;
    /**
     * Duration to block an IP in seconds
     */
    blockDurationSeconds?: pulumi.Input<number>;
    /**
     * HTTP response code to send when traffic is being blocked
     */
    blockHttpCode?: pulumi.Input<number>;
    /**
     * URL to redirect to when blocking with a '301' or '302' HTTP status code
     */
    blockRedirectUrl?: pulumi.Input<string>;
    /**
     * Headers used for assigning client IPs to requests
     */
    clientIpRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name of the site
     */
    displayName: pulumi.Input<string>;
    /**
     * Immediately block requests that contain attack signals
     */
    immediateBlock?: pulumi.Input<boolean>;
    /**
     * Identifying name of the site
     */
    shortName: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
}
